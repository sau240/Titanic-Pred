{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2965537,"sourceType":"datasetVersion","datasetId":1818188}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **IMPORTING PACKAGES**","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder \nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-16T03:44:39.404310Z","iopub.execute_input":"2025-05-16T03:44:39.404535Z","iopub.status.idle":"2025-05-16T03:44:41.954581Z","shell.execute_reply.started":"2025-05-16T03:44:39.404505Z","shell.execute_reply":"2025-05-16T03:44:41.953470Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/titanic-dataset/Titanic-Dataset.csv\")\nd = pd.DataFrame(data)\nprint(d)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T14:56:44.385087Z","iopub.execute_input":"2025-05-15T14:56:44.385425Z","iopub.status.idle":"2025-05-15T14:56:44.409425Z","shell.execute_reply.started":"2025-05-15T14:56:44.385403Z","shell.execute_reply":"2025-05-15T14:56:44.408432Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **DATA PREPROCESSING**","metadata":{}},{"cell_type":"code","source":"d.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T12:57:54.355883Z","iopub.execute_input":"2025-05-15T12:57:54.356196Z","iopub.status.idle":"2025-05-15T12:57:54.386403Z","shell.execute_reply.started":"2025-05-15T12:57:54.356176Z","shell.execute_reply":"2025-05-15T12:57:54.385327Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"d.isnull().head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T12:58:32.997864Z","iopub.execute_input":"2025-05-15T12:58:32.998169Z","iopub.status.idle":"2025-05-15T12:58:33.011533Z","shell.execute_reply.started":"2025-05-15T12:58:32.998149Z","shell.execute_reply":"2025-05-15T12:58:33.010441Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"d.isna().head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T12:58:51.772363Z","iopub.execute_input":"2025-05-15T12:58:51.772721Z","iopub.status.idle":"2025-05-15T12:58:51.786451Z","shell.execute_reply.started":"2025-05-15T12:58:51.772637Z","shell.execute_reply":"2025-05-15T12:58:51.785510Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"d.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T13:00:44.357245Z","iopub.execute_input":"2025-05-15T13:00:44.357936Z","iopub.status.idle":"2025-05-15T13:00:44.368595Z","shell.execute_reply.started":"2025-05-15T13:00:44.357897Z","shell.execute_reply":"2025-05-15T13:00:44.367387Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"d.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T13:05:44.534908Z","iopub.execute_input":"2025-05-15T13:05:44.535266Z","iopub.status.idle":"2025-05-15T13:05:44.542960Z","shell.execute_reply.started":"2025-05-15T13:05:44.535204Z","shell.execute_reply":"2025-05-15T13:05:44.542069Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **STATISTIC REPRESENTATION OF AGE_GROUPS**","metadata":{}},{"cell_type":"code","source":"Age_data = d[\"Age\"].dropna()\nplt.hist(Age_data, bins=20, color=\"cyan\", edgecolor=\"black\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Number of People\")\nplt.title(\"Age Distribution of Titanic Passengers\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T13:33:17.448737Z","iopub.execute_input":"2025-05-15T13:33:17.449064Z","iopub.status.idle":"2025-05-15T13:33:17.653768Z","shell.execute_reply.started":"2025-05-15T13:33:17.449042Z","shell.execute_reply":"2025-05-15T13:33:17.652522Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **STATIC REPRESENTAION OF SEX_RATIO**","metadata":{}},{"cell_type":"code","source":"sex_counts = d[\"Sex\"].value_counts()\nplt.bar(sex_counts.index, sex_counts.values, color='cyan', edgecolor='black', width=0.09)\nplt.title(\"Sex Ratio on Titanic\")\nplt.xlabel(\"Sex\")\nplt.ylabel(\"Number of People\")\nplt.grid(True)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T13:55:22.063591Z","iopub.execute_input":"2025-05-15T13:55:22.063920Z","iopub.status.idle":"2025-05-15T13:55:22.211471Z","shell.execute_reply.started":"2025-05-15T13:55:22.063890Z","shell.execute_reply":"2025-05-15T13:55:22.210658Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **LABELLING THE AXIS**","metadata":{}},{"cell_type":"code","source":"\nX = d[['PassengerId', 'Pclass',  'Sex', 'Age', 'Fare']]\ny = d[\"Survived\"]\nd.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T15:01:26.926794Z","iopub.execute_input":"2025-05-15T15:01:26.927114Z","iopub.status.idle":"2025-05-15T15:01:26.941060Z","shell.execute_reply.started":"2025-05-15T15:01:26.927092Z","shell.execute_reply":"2025-05-15T15:01:26.939991Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **MODEL SELECTION**","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nmodels = {\n    \"Logistic Regression\": LogisticRegression(),\n    \"K-Nearest Neighbors\": KNeighborsClassifier(),\n    \"Random Forest\": RandomForestClassifier(),\n    \"Support Vector Machine\": SVC()\n}\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    print(f\"{name} Accuracy: {acc:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T15:02:01.157448Z","iopub.execute_input":"2025-05-15T15:02:01.157768Z","iopub.status.idle":"2025-05-15T15:02:01.711752Z","shell.execute_reply.started":"2025-05-15T15:02:01.157740Z","shell.execute_reply":"2025-05-15T15:02:01.710842Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **MODEL TRAIN & TEST**","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Predict\ny_pred = model.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nscores = cross_val_score(model, X, y, cv=5)\n\nprint(f\"Logistic Regression Accuracy: {acc:.4f}\")\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\nprint(\"Classification Report:\\n\", classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T15:03:52.575665Z","iopub.execute_input":"2025-05-15T15:03:52.576003Z","iopub.status.idle":"2025-05-15T15:03:54.649571Z","shell.execute_reply.started":"2025-05-15T15:03:52.575980Z","shell.execute_reply":"2025-05-15T15:03:54.648926Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **GRAPHICAL REPRESENTATION OF OUTPUT**","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(6,4))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix - Logistic Regression')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T15:07:56.855424Z","iopub.execute_input":"2025-05-15T15:07:56.856251Z","iopub.status.idle":"2025-05-15T15:07:57.487531Z","shell.execute_reply.started":"2025-05-15T15:07:56.856197Z","shell.execute_reply":"2025-05-15T15:07:57.486500Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import roc_curve, roc_auc_score\n\ny_proba = model.predict_proba(X_test)[:, 1]\n\nfpr, tpr, thresholds = roc_curve(y_test, y_proba)\nauc_score = roc_auc_score(y_test, y_proba)\n\nplt.figure(figsize=(6,4))\nplt.plot(fpr, tpr, label=f'AUC = {auc_score:.2f}')\nplt.plot([0,1], [0,1], linestyle='--', color='gray')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve - Logistic Regression')\nplt.legend(loc='lower right')\nplt.grid(True)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-15T15:08:19.954034Z","iopub.execute_input":"2025-05-15T15:08:19.954500Z","iopub.status.idle":"2025-05-15T15:08:20.139994Z","shell.execute_reply.started":"2025-05-15T15:08:19.954476Z","shell.execute_reply":"2025-05-15T15:08:20.139005Z"}},"outputs":[],"execution_count":null}]}